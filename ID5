//I literaly spent 10 hours for this..... PALIN
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <algorithm>
using namespace std;
short int num[1000001];
//Utility functions
void Zeroit(short x[])
{
    for(int i=0;i<1000001;i++)
    x[i]=0;
}
void printit(short x[],int y)
{
    for(int i=y;i<1000001;i++){
        printf("%hd",x[i]);
    }
    printf("\n");
}

int areAll9s(short x[],int x1)
{
    while(x1<1000001)
    {if(x[x1]!=9)return 0;
    else x1++;}
    return 1;
}
//Function to check whether the number is a palindrome.
int checkPal(short x[],int l1,int m)
{
    int k1,k2;
    if(l1%2==0)
    {k1=m-1;k2=m+2;}
    else
    {k1=m-1;k2=m+1;}
    while(k2<1000001)
    {
        if(x[k1]!=x[k2])
        return 0;
        else
        {k1--;k2++;}
    }
    return 1;
}
void Add1(short arr[],int m1,int l1)
{
    if(l1%2==1)
    {
        int carry=1,k1=m1,k2=m1;
        do{
            int temp=arr[k1]+carry;
            
            arr[k1]=temp%10;
            arr[k2]=arr[k1];
            k1--;k2++;
            carry=temp/10;
        }while(carry!=0);
    }
    else
    {
        int carry=1,k1=m1,k2=m1+1;
        do{
            int temp=arr[k1]+carry;
            arr[k1]=temp%10;
            arr[k2]=arr[k1];
            k1--;k2++;
            carry=temp/10;
        }while(carry!=0);
    }
}
int main()
{
    int t;
    scanf("%d",&t);
    while(t--)
    {
        Zeroit(num);
        string n;
        cin>>n;
        //Storing the given input in an short int array (for memory concerns....)
        int l=n.length();
        int i=l-1,i1=1000000;
        while (i>=0)
        {
            num[i1]=n[i]-'0';
            i--;i1--;
        }
        i1++;
        //i1 wil now be the index of this array.

        /*CASE 1: All 9s.
          CASE 2: Odd or even palindrome.
          CASE 3: Non palindrome
                  (a)Adding 1 to middle is necessary.
                  (b)Adding 1 to middle is not necessary.*/
        //CASE 1.
        int nine=areAll9s(num,i1);
        if(nine==1)
        {
            Zeroit(num);
            num[i1-1]=1;num[1000000]=1;
            i1--;
        }
        else//CASE 2 and CASE 3.
        {
            int mid=1000000-l/2;
            int p=checkPal(num,l,mid);
            if(p==1)//CASE 2 PALINDROME CASE.
            {
                  Add1(num,mid,l);
            }
            else//CASE 3 NON PALINDROME CASE.
            {
                int tester=0,k1,k2;//Variable to check whether adding is necessary to add 1 to middle to increase number
                if(l%2==1){k1=mid-1;k2=mid+1;}
                else{k1=mid-1;k2=mid+2;}
                while(tester==0)
                {
                    if(num[k1]<num[k2]){tester=1;break;}
                    else if(num[k1]>num[k2]){tester=0;break;}
                    else{k1--;k2++;}
                }
               //MIRRORING the left and right halves.....
                if(l%2==1){k1=mid-1;k2=mid+1;}
                else{k1=mid-1;k2=mid+2;}
                while(k2<1000001)
                {
                    num[k2]=num[k1];
                    k1--;k2++;
                }
                //Setting middle elements equal in case of even no of digits.
                if(l%2==0)
                {
                    if(num[mid]<num[mid+1])
                    {
                        num[mid+1]=num[mid];
                        if(tester==0)tester=1;
                    }
                    if(num[mid]>num[mid+1])
                    {
                        num[mid+1]=num[mid];
                        if(tester==1)tester=0;
                    }
                }
                //Using tester.
                if(tester==1)
                {
                    Add1(num,mid,l);
                }
            }
        }
        printit(num,i1);
    }
}
